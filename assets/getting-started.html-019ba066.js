import{_ as d,M as a,p as o,q as t,R as e,t as s,N as n,V as r,a1 as i}from"./framework-96b046e1.js";const u="/images/guide/zhfc-cli-create.jpg",p={},h=e("h1",{id:"快速开始",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#快速开始","aria-hidden":"true"},"#"),s(" 快速开始")],-1),m=e("p",null,"这一章节会帮助你从头搭建一个简单的微前端应用，应用应该包含一个主项目和至少一个子项目。",-1),v=e("h2",{id:"依赖环境",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#依赖环境","aria-hidden":"true"},"#"),s(" 依赖环境")],-1),_={href:"https://nodejs.org/en/",target:"_blank",rel:"noopener noreferrer"},b=i(`<h2 id="安装cli" tabindex="-1"><a class="header-anchor" href="#安装cli" aria-hidden="true">#</a> 安装CLI</h2><p>我们使用 <code>zhfc-cli</code> 来生成微前端主项目和子项目脚手架，首先在全局范围内安装 <code>zhfc-cli</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i zhfc-cli <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="生成主项目" tabindex="-1"><a class="header-anchor" href="#生成主项目" aria-hidden="true">#</a> 生成主项目</h2><p>进入工作目录，输入如下命令创建主项目，其中 <code>xtzhfc</code> 为目录名：</p><div class="language-base line-numbers-mode" data-ext="base"><pre class="language-base"><code>zhfc-cli create xtzhfc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>向导将会指引你完成主项目的创建，如图：</p><p><img src="`+u+`" alt="创建向导"></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><ol><li>应用类型：生成主项目选择 <code>微前端主应用</code>。</li><li>应用名：即是主应用名配置参数 <code>p<wbr>rocess.env.VUE_APP_NAME</code>，又是 <code>package.json</code> 的 <code>name</code> ，所以名称要符合 <code>package</code> 命名规范，推荐使用小写，多个单词使用 <code>-</code> 隔开，如: <code>presale-house</code>。</li><li>启动端口：应用的启动端口。</li><li>应用标题：此参数会出现在 <strong>系统登录</strong> 标题、登录后 <strong>主页面导航栏</strong> 系统标题、<strong>页面标题</strong> 等多个位置。</li><li>eslint：为了保证代码的规范性，推荐项目中使用 <code>eslint</code>，开启后将会增加 <code>eslint:recommended</code> 、<code>plugin:vue/recommended</code> 预设。</li></ol></div><h2 id="生成子项目" tabindex="-1"><a class="header-anchor" href="#生成子项目" aria-hidden="true">#</a> 生成子项目</h2><p>进入工作目录，输入如下命令创建子项目，其中 <code>byfz</code> 为目录名：</p><div class="language-base line-numbers-mode" data-ext="base"><pre class="language-base"><code>zhfc-cli create byfz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,12),g={class:"custom-container tip"},f=e("p",{class:"custom-container-title"},"TIP",-1),x=e("li",null,[s("应用类型：生成子项目选择 "),e("code",null,"微前端子应用"),s("。")],-1),k=e("li",null,"应用名：应用名称，同创建主应用应用名。",-1),B=e("li",null,"启动端口：应用的启动端口。",-1),z=e("code",null,"输入应用标题",-1),E=e("li",null,[s("重复此步骤创建其他子项目，"),e("span",{class:"c-red"},"注意：项目名和端口号不要重复。")],-1),N=i(`<h2 id="启动项目" tabindex="-1"><a class="header-anchor" href="#启动项目" aria-hidden="true">#</a> 启动项目</h2><ol><li>修改主项目 <code>.env.development</code> api地址</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 服务基地址</span>
VUE_APP_BASE_API <span class="token operator">=</span> <span class="token string">&#39;http://81.71.162.135:81/spfjy/&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>此地址可能不可用，不可用时请更换实际项目地址。</p></div><ol start="2"><li>启动主项目</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> xtzhfc
<span class="token function">npm</span> run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>启动子项目</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> byfz
<span class="token function">npm</span> run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>访问主项目启动地址进入系统登录</li></ol><div class="custom-container tip"><p class="custom-container-title">TIP</p><ol><li>主项目和子项目没有启动顺序，可以先启动主项目，也可以先启动子项目。</li><li>如果主项目启动后，点击子项目菜单出现加载子项目失败的提示，请启动对应子项目，<span class="c-red">启动完成后需要刷新一下主项目</span>，否则即使子项目启动会依然提示加载子项目失败！</li><li>主项目和子项目都启动后，<span class="c-red">仅仅需要访问主项目的启动端口进入系统</span>，点击对应子系统时会自动加载子系统，单独访问子系统会提示请在主系统打开！</li></ol></div>`,10);function A(I,P){const c=a("ExternalLinkIcon"),l=a("RouterLink");return o(),t("div",null,[h,m,v,e("ul",null,[e("li",null,[e("a",_,[s("Node.js v12.16.0+"),n(c)])])]),b,e("div",g,[f,e("ol",null,[x,k,B,e("li",null,[s("创建向导和主项目基本一致，和主应用不同的是子应用缺少 "),z,s(" 步骤，子应用的标题需要到 "),n(l,{to:"/guide/subsystem-config.md/#%E5%88%9B%E5%BB%BA%E5%AD%90%E7%B3%BB%E7%BB%9F"},{default:r(()=>[s("子系统配置->创建子系统")]),_:1}),s(" 设置。")]),E])]),N])}const j=d(p,[["render",A],["__file","getting-started.html.vue"]]);export{j as default};
