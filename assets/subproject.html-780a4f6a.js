import{_ as t,M as c,p as a,q as u,R as e,t as l,N as n,V as d,a1 as i}from"./framework-96b046e1.js";const s="/images/configuration/mainsystem-env.jpg",p="/images/configuration/subsystem-env.jpg",h={},r=i('<h1 id="脚手架配置项参考" tabindex="-1"><a class="header-anchor" href="#脚手架配置项参考" aria-hidden="true">#</a> 脚手架配置项参考</h1><p>脚手架配置项是项目脚手架中的配置文件、配置项，包括 <code>.env</code> 等配置。</p><h2 id="主项目-env-配置" tabindex="-1"><a class="header-anchor" href="#主项目-env-配置" aria-hidden="true">#</a> 主项目 <code>.env</code> 配置</h2><p>包括主项目服务地址、应用名、微前端参数等配置，如图：</p><p><img src="'+s+'" alt="主项目.env"></p><h3 id="vue-app-base-api" tabindex="-1"><a class="header-anchor" href="#vue-app-base-api" aria-hidden="true">#</a> VUE_APP_BASE_API</h3><ul><li><p>类型：<code>String</code></p></li><li><p>默认值：<code>&quot;&quot;</code></p></li><li><p>必填：<code>是</code></p></li><li><p>描述：主项目后台服务基地址。</p></li></ul><h3 id="vue-app-name" tabindex="-1"><a class="header-anchor" href="#vue-app-name" aria-hidden="true">#</a> VUE_APP_NAME</h3>',8),_=e("li",null,[e("p",null,[l("类型："),e("code",null,"String")])],-1),E=e("li",null,[e("p",null,[l("默认值："),e("code",null,'""')])],-1),m=e("li",null,[e("p",null,[l("必填："),e("code",null,"是")])],-1),v=e("code",null,"zhfc-cli",-1),A=e("code",null,"应用名",-1),f=i('<h3 id="vue-app-element-size" tabindex="-1"><a class="header-anchor" href="#vue-app-element-size" aria-hidden="true">#</a> VUE_APP_ELEMENT_SIZE</h3><ul><li><p>类型：<code>String</code></p></li><li><p>默认值：<code>&quot;small&quot;</code></p></li><li><p>必填：<code>是</code></p></li><li><p>描述：主项目 <code>element-ui</code> 组件 <code>size</code> ，如果子项目也是 <code>vue + element-ui</code> ，子项目将继承此配置。</p></li></ul><h3 id="vue-app-micro-prefetch" tabindex="-1"><a class="header-anchor" href="#vue-app-micro-prefetch" aria-hidden="true">#</a> VUE_APP_MICRO_PREFETCH</h3><ul><li><p>类型：<code>Boolean</code></p></li><li><p>默认值：开发环境为 <code>false</code> ， 线上环境 (prod或stage) 为 <code>true</code></p></li><li><p>必填：<code>是</code></p></li><li><p>描述：微前端是否启用预加载，配置为 <code>true</code> 则会在第一个微应用 mount 完成后开始预加载其他微应用的静态资源，线上环境可开启选项优化子项目加载速度。</p></li></ul><h3 id="vue-app-micro-style-isolation" tabindex="-1"><a class="header-anchor" href="#vue-app-micro-style-isolation" aria-hidden="true">#</a> VUE_APP_MICRO_STYLE_ISOLATION</h3>',5),B=e("li",null,[e("p",null,[l("类型："),e("code",null,"Boolean")])],-1),g=e("li",null,[e("p",null,[l("默认值："),e("code",null,"true")])],-1),P=e("li",null,[e("p",null,[l("必填："),e("code",null,"是")])],-1),b=e("code",null,"true",-1),x=e("code",null,"样式隔离",-1),V=i('<div class="custom-container tip"><p class="custom-container-title">TIP</p><ol><li>由于 <code>shadow dom</code> 方式的样式隔离存在一些技术问题，项目中都是使用增加应用名前缀方式。</li><li>增加应用名前缀的样式隔离同样存在局限性，对于增加到子应用外的 <code>dom</code> 节点样式会失效，例如：<code>el-dialog</code>、<code>el-select</code> 等组件会将弹出内容添加到 <code>body</code> 节点下，而不是在子应用挂载节点下，样式隔离会失效，修改子应用中这些组件样式时应注意！</li></ol></div><h3 id="vue-app-micro-keep-alive" tabindex="-1"><a class="header-anchor" href="#vue-app-micro-keep-alive" aria-hidden="true">#</a> VUE_APP_MICRO_KEEP_ALIVE</h3>',2),I=e("li",null,[e("p",null,[l("类型："),e("code",null,"Boolean")])],-1),S=e("li",null,[e("p",null,[l("默认值："),e("code",null,"true")])],-1),q=e("li",null,[e("p",null,[l("必填："),e("code",null,"是")])],-1),k=e("code",null,"KeepAlive",-1),y=e("code",null,"true",-1),N=e("code",null,"unmount",-1),U=e("code",null,"dom",-1),M=i('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>qiankun</code> 框架本身是不支持 <code>KeepAlive</code> 模式的，为了解决子系统之间切换页签缓存问题，对 <code>qiankun</code> 框架进行了修改，项目中使用的 <code>qiankun-dhcc</code> 增加了此功能。</p></div><h2 id="子项目-env-配置" tabindex="-1"><a class="header-anchor" href="#子项目-env-配置" aria-hidden="true">#</a> 子项目 <code>.env</code> 配置</h2><p>包括子项目服务地址、应用名、部署参数等配置，如图：</p><p><img src="'+p+'" alt="子项目.env"></p><h3 id="vue-app-base-api-1" tabindex="-1"><a class="header-anchor" href="#vue-app-base-api-1" aria-hidden="true">#</a> VUE_APP_BASE_API</h3><ul><li><p>类型：<code>String</code></p></li><li><p>默认值：<code>&quot;&quot;</code></p></li><li><p>必填：<code>是</code></p></li><li><p>描述：子项目后台服务基地址。</p></li></ul><h3 id="vue-app-name-1" tabindex="-1"><a class="header-anchor" href="#vue-app-name-1" aria-hidden="true">#</a> VUE_APP_NAME</h3>',7),T=e("li",null,[e("p",null,[l("类型："),e("code",null,"String")])],-1),L=e("li",null,[e("p",null,[l("默认值："),e("code",null,'""')])],-1),O=e("li",null,[e("p",null,[l("必填："),e("code",null,"是")])],-1),R=e("code",null,"zhfc-cli",-1),C=e("code",null,"应用名",-1),D=e("h3",{id:"vue-app-deploy-mode",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#vue-app-deploy-mode","aria-hidden":"true"},"#"),l(" VUE_APP_DEPLOY_MODE")],-1),z=e("li",null,[e("p",null,[l("类型："),e("code",null,"String")])],-1),F=e("li",null,[e("p",null,[l("默认值："),e("code",null,'"2"')])],-1),j=e("li",null,[e("p",null,[l("必填："),e("code",null,"是")])],-1),K=e("div",{class:"custom-container tip"},[e("p",{class:"custom-container-title"},"TIP"),e("p",null,[l("开发模式配置文件 "),e("code",null,".env.development.xxx"),l(" 不存在此配置，仅线上环境配置文件有效。")])],-1);function w(Y,H){const o=c("RouterLink");return a(),u("div",null,[r,e("ul",null,[_,E,m,e("li",null,[e("p",null,[l("描述：主项目应用名，值为 "),v,l(),n(o,{to:"/guide/getting-started.html#%E7%94%9F%E6%88%90%E4%B8%BB%E9%A1%B9%E7%9B%AE"},{default:d(()=>[l("生成主项目")]),_:1}),l(" 的 "),A,l("。")])])]),f,e("ul",null,[B,g,P,e("li",null,[e("p",null,[l("描述：微前端是否启用样式隔离，配置为 "),b,l(" 时子应用样式会自动增加微前端应用名前缀，参考 "),n(o,{to:"/guide/intro.html#%E9%9A%94%E7%A6%BB%E6%B2%99%E7%AE%B1"},{default:d(()=>[l("隔离沙箱")]),_:1}),l(" 中 "),x])])]),V,e("ul",null,[I,S,q,e("li",null,[e("p",null,[l("描述：微前端是否启用 "),k,l(" 模式，配置为 "),y,l(" 时切换子应用并不会执行子应用 "),N,l(" 生命周期函数，子应用不会卸载，挂载 "),U,l(" 会隐藏，在这种模式下 "),n(o,{to:"/guide/intro.html#%E9%9A%94%E7%A6%BB%E6%B2%99%E7%AE%B1"},{default:d(()=>[l("隔离沙箱")]),_:1}),l(" 还是会执行副作用清理，避免子应用之间的污染，由于子应用并未卸载，当下次重新激活子应用时，子应用还能恢复到之前的状态，隔离沙盒也会重新应用副作用，这样就可以做到子系统之间切换页签时使用缓存，页面不刷新。")])])]),M,e("ul",null,[T,L,O,e("li",null,[e("p",null,[l("描述：子项目应用名，值为 "),R,l(),n(o,{to:"/guide/getting-started.html#%E7%94%9F%E6%88%90%E5%AD%90%E9%A1%B9%E7%9B%AE"},{default:d(()=>[l("生成子项目")]),_:1}),l(" 的 "),C,l("。")])])]),D,e("ul",null,[z,F,j,e("li",null,[e("p",null,[l("描述：子应用部署方式, 1：独立端口根路径部署，2：与主应用同一端口子路径部署，参考 "),n(o,{to:"/guide/deploy.html#%E6%A0%B9%E8%B7%AF%E5%BE%84%E9%83%A8%E7%BD%B2"},{default:d(()=>[l("根路径部署")]),_:1}),l(" 和 "),n(o,{to:"/guide/deploy.html#%E5%AD%90%E8%B7%AF%E5%BE%84%E9%83%A8%E7%BD%B2"},{default:d(()=>[l("子路径部署")]),_:1}),l("。")])])]),K])}const G=t(h,[["render",w],["__file","subproject.html.vue"]]);export{G as default};
