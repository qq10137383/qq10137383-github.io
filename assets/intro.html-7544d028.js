import{_ as s,M as a,p as r,q as c,R as t,t as e,N as d,a1 as n}from"./framework-96b046e1.js";const i="/images/guide/relationship.jpg",l="/images/guide/load.jpg",p={},h=n('<h1 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h1><h2 id="什么是微前端" tabindex="-1"><a class="header-anchor" href="#什么是微前端" aria-hidden="true">#</a> 什么是微前端</h2><p>传统的 <code>vue</code> 前端项目，每个项目都有独立的登录、菜单、权限管理等功能，需要整合到一起存在困难，微前端产生的目的就是为了解决系统之间耦合问题，使应用之间彼此独立的同时又能方便的整合到一起。</p><p>微前端分为主项目(基座)和子项目(应用系统)，对于一个微前端项目往往会有一个主项目和多个子项目。</p><ul><li><strong>主项目</strong>：负责统一登录、菜单、权限拦截、子系统加载、系统通信等功能</li><li><strong>子项目</strong>：负责应用系统具体功能</li></ul><p>子项目虽然可以独立运行，但是缺少登录权限功能也是不能正常使用的，所以子项目一般都是嵌入主项目中运行，下图描述了主项目和子项目的关系。</p><p><img src="'+i+'" alt="关系图"></p><h2 id="微前端的特点" tabindex="-1"><a class="header-anchor" href="#微前端的特点" aria-hidden="true">#</a> 微前端的特点</h2><p>微前端架构具备以下几个核心价值：</p><ul><li><p>技术栈无关<br> 主项目不限制接入应用的技术栈，子项目具备完全自主权，子项目可以是基于路由系统的技术栈，例如：<code>vue2</code> 、<code>vue3</code>、<code>react</code>、<code>angular</code> 等。</p></li><li><p>独立开发、独立部署<br> 子项目仓库独立，可独立开发、独立部署，部署完成后主项目自动完成同步更新。</p></li><li><p>独立运行<br> 每个子项目之间状态隔离，运行时状态不共享。</p></li><li><p>统一入口<br> 主项目统一负责系统的登录、菜单、权限拦截等功能，子项目只负责实现具体的业务功能，子项目通过 <code>事件</code> 和 <code>api</code> 与主项目、其他子项目之间交互。</p></li></ul><h2 id="它是如何工作的" tabindex="-1"><a class="header-anchor" href="#它是如何工作的" aria-hidden="true">#</a> 它是如何工作的？</h2>',11),u={href:"https://v2.cn.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://qiankun.umijs.org/zh",target:"_blank",rel:"noopener noreferrer"},g=n('<h3 id="子系统加载" tabindex="-1"><a class="header-anchor" href="#子系统加载" aria-hidden="true">#</a> 子系统加载</h3><p>对路由的监听是微前端实现的关键，当切换路由地址满足子系统路由激活规则时，<strong>qiankun</strong> 加载对应子系统代码，渲染到指定的区域。</p><ul><li>如有两个子系统 <code>白蚁防治</code> 和 <code>安全监督</code>，激活规则如下：</li></ul><table><thead><tr><th>激活规则</th><th>子系统</th></tr></thead><tbody><tr><td><code>/byfz</code></td><td><code>白蚁防治</code></td></tr><tr><td><code>/aqjd</code></td><td><code>安全监督</code></td></tr></tbody></table><ul><li>两个系统各有两个路由，路由规则如下：</li></ul><ol><li><code>白蚁防治</code>：</li></ol><table><thead><tr><th>路由</th><th>功能项</th></tr></thead><tbody><tr><td><code>/entrustDisposeInfo</code></td><td><code>委托受理信息</code></td></tr><tr><td><code>/projectConstructionInfo</code></td><td><code>防治工程施工信息</code></td></tr></tbody></table><ol start="2"><li><code>安全监督</code>：</li></ol><table><thead><tr><th>路由</th><th>功能项</th></tr></thead><tbody><tr><td><code>/safetyAssessmentInfo</code></td><td><code>安全监督业务受理</code></td></tr><tr><td><code>/reportSendRegister</code></td><td><code>报告发放登记</code></td></tr></tbody></table><ul><li>按照 <code>激活规则</code> 和 <code>路由规则</code>，输入路由地址时加载子系统和功能如下：</li></ul><table><thead><tr><th>路由地址</th><th>加载子系统</th><th>加载功能项</th></tr></thead><tbody><tr><td><code>/byfz/entrustDisposeInfo</code></td><td><code>白蚁防治</code></td><td><code>委托受理信息</code></td></tr><tr><td><code>/byfz/projectConstructionInfo</code></td><td><code>白蚁防治</code></td><td><code>防治工程施工信息</code></td></tr><tr><td><code>/aqjd/safetyAssessmentInfo</code></td><td><code>安全监督</code></td><td><code>安全监督业务受理</code></td></tr><tr><td><code>/aqjd/reportSendRegister</code></td><td><code>安全监督</code></td><td><code>报告发放登记</code></td></tr></tbody></table><p>主项目加载子系统，在蓝色区域渲染子系统功能。</p><p><img src="'+l+'" alt="路由加载子系统"></p>',13),b={class:"custom-container tip"},f=t("p",{class:"custom-container-title"},"TIP",-1),m={href:"https://single-spa.js.org/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://qiankun.umijs.org/zh/guide/getting-started#1-%E5%AF%BC%E5%87%BA%E7%9B%B8%E5%BA%94%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90",target:"_blank",rel:"noopener noreferrer"},v=t("code",null,"mount",-1),y=t("code",null,"dom",-1),E=t("code",null,"unmount",-1),q=n('<h3 id="隔离沙箱" tabindex="-1"><a class="header-anchor" href="#隔离沙箱" aria-hidden="true">#</a> 隔离沙箱</h3><p>多个子系统嵌入到主项目中加载时，可能会存在同时修改 <code>window</code> 等全局对象，增加事件监听 <code>addEventListener</code> 等操作，以及相同的样式规则会添加到主项目(如：<code>element-ui</code> 样式)，当子系统卸载时需要清理这些副作用，否则会造成全局对象的污染以及样式污染，<code>qiankun</code> 提供了隔离沙箱来解决这些问题。</p><ol><li><strong>Proxy沙箱</strong></li></ol><p><strong>qiankun</strong> 使用 <code>ES6 Proxy</code> 生成 <code>FakeWindow</code> 对象劫持了 <code>window</code> 对象的修改， 当应用卸载时会还原 <code>window</code> 对象到初始状态。</p><ol start="2"><li><strong>样式隔离</strong></li></ol><p><strong>qiankun</strong> 提供了多种样式隔离方案。</p>',6),x={href:"https://qiankun.umijs.org/zh/api#startopts",target:"_blank",rel:"noopener noreferrer"},j={href:"https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Using_shadow_DOM",target:"_blank",rel:"noopener noreferrer"},I=t("li",null,[e("当默认开启沙盒模式时，"),t("strong",null,"qiankun"),e(" 会遍历子系统的样式增加样式前缀，这样子系统样式就具有更高的优先级会覆盖其他系统样式，如 "),t("strong",null,"白蚁防治"),e(" 子系统 "),t("code",null,"el-radio-button")],-1),w=n(`<div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div[data-qiankun-byfz] .el-radio-button</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token property">outline</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function z(A,B){const o=a("ExternalLinkIcon");return r(),c("div",null,[h,t("p",null,[e("智慧房产微前端是基于 "),t("a",u,[e("vue2"),d(o)]),e(" 和 "),t("a",_,[e("qiankun"),d(o)]),e(" 的微前端脚手架。")]),g,t("div",b,[f,t("p",null,[e("qiankun 底层使用 "),t("a",m,[e("single-spa"),d(o)]),e(" 加载子系统代码，加载完成后会调用子系统 "),t("a",k,[e("生命周期钩子函数"),d(o)]),e("， 在 "),v,e(" 方法中渲染子系统到主项目指定的 "),y,e(" ，在 "),E,e(" 方法中完成子系统的卸载。")])]),q,t("ul",null,[t("li",null,[e("当开启严格样式隔离 "),t("a",x,[e("strictStyleIsolation"),d(o)]),e(" 时会在主项目中生成 一个 "),t("a",j,[e("shadow dom"),d(o)]),e(" 来挂载子系统，子系统的样式天然就是隔离的。")]),I]),w])}const N=s(p,[["render",z],["__file","intro.html.vue"]]);export{N as default};
