import{_ as c,M as i,p,q as d,R as e,t as s,N as n,V as o,a1 as t}from"./framework-96b046e1.js";const l="/images/guide/create-subsystem.jpg",r="/images/guide/create-menu.jpg",u="/images/guide/rent-manage-1.jpg",m="/images/guide/rent-manage-2.jpg",g="/images/guide/create-role.jpg",h="/images/guide/role-func-1.jpg",_="/images/guide/role-func-2.jpg",v="/images/guide/add-org.jpg",E="/images/guide/add-account.jpg",B="/images/guide/member-manage-1.jpg",k="/images/guide/member-manage-2.jpg",b="/images/guide/subsystem-test.jpg",f="/images/guide/subsystem-blank.jpg",A="/images/guide/cli-reserved-router.jpg",y="/images/guide/subsystem-view.jpg",j="/images/guide/subsystem-view-loaded.jpg",D="/images/guide/start-master-login.jpg",x="/images/guide/start-master-byfz.jpg",q="/images/guide/start-master-aqjd.jpg",F="/images/guide/start-sub-byfz.jpg",I={},V=t('<h1 id="子系统配置" tabindex="-1"><a class="header-anchor" href="#子系统配置" aria-hidden="true">#</a> 子系统配置</h1><p>上一节生成了脚手架工程，运行主项目可以看到登录页面，但是登录账号、子系统、菜单还没有创建，这一章节将会帮助你在 <code>V7平台</code> 系统管理中创建这些后台配置，并在子系统中创建菜单对应路由 <code>vue router</code>、页面 <code>vue component</code> 。</p><h2 id="创建子系统后台配置" tabindex="-1"><a class="header-anchor" href="#创建子系统后台配置" aria-hidden="true">#</a> 创建子系统后台配置</h2><h3 id="创建子系统" tabindex="-1"><a class="header-anchor" href="#创建子系统" aria-hidden="true">#</a> 创建子系统</h3><p>使用管理员账号 <code>admin</code> 登陆 <code>V7平台</code> 管理端，打开 <code>权限-&gt;子系统管理</code> 添加子系统，如图：</p><p><img src="'+l+'" alt="创建子系统"></p>',6),w={class:"custom-container tip"},N=e("p",{class:"custom-container-title"},"TIP",-1),P=e("li",null,[s("名称：子系统标题，显示在主项目系统切换菜单栏的标题"),e("span",{class:"c-red"},"（必填）"),s("。")],-1),z=e("code",null,"应用名",-1),R=e("code",null,"/${代号}",-1),T=e("code",null,"/byfz/xxxxx",-1),C=e("span",{class:"c-red"},"（必填）",-1),G=e("code",null,"启动端口",-1),W=e("span",{class:"c-red"},"不正确的值会导致开发模式下子系统加载失败！（必填）",-1),$=e("code",null,'""',-1),L=e("code",null,"步骤五",-1),U=e("span",{class:"c-red"},"不正确的值会导致部署模式下子系统加载失败！（必填）",-1),M=e("li",null,"icon：子系统图标，显示在主项目系统切换菜单栏的图标。",-1),S=t(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> 
    <span class="token property">&quot;devPort&quot;</span><span class="token operator">:</span> <span class="token number">9003</span><span class="token punctuation">,</span> 
    <span class="token property">&quot;prodUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://192.168.0.159:9070/sub_byfz/&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;icon&quot;</span><span class="token operator">:</span> <span class="token string">&quot;byfz&quot;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建子系统菜单" tabindex="-1"><a class="header-anchor" href="#创建子系统菜单" aria-hidden="true">#</a> 创建子系统菜单</h3><p>使用管理员账号 <code>admin</code> 登陆 <code>V7平台</code> 管理端，打开 <code>权限-&gt;功能定义</code> 添加子系统菜单组、菜单，配置前需先切换到上一步配置的子系统，如图：</p><p><img src="`+r+'" alt="创建子系统菜单"></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><ol><li>上一级：菜单组或菜单项的父级节点，用来生成上下级关系<span class="c-red">（必填）</span>。</li><li>名称：菜单组或菜单项的标题，显示在主项目菜单栏的标题<span class="c-red">（必填）</span>。</li><li>有效：菜单组、菜单项是否有效。<span class="c-red">（必填）</span>。</li><li>节点类型：如果是菜单组选择 <code>目录</code> ， 菜单项选择 <code>功能</code> ，其他选项暂时无用。<span class="c-red">（必填）</span>。</li><li>页面路径：此值对应子系统中路由地址，仅菜单项有实际意义，此值必须与子系统 <code>vue router</code> 定义的 <code>path</code> 保持一致，当在主系统中点击菜单项时，会加载子系统路由对应的页面， <span class="c-red">不正确的值会导致加载菜单项时出现空白页面！（必填）</span></li><li>弹窗类型、后台路径对前端暂时无意义。</li><li>扩展配置：扩展配置定义了菜单组、菜单项的额外配置，主要配置作用如下： <ul><li>name：菜单组或菜单项名称，同时也是路由对应 <code>vue组件</code> 的 <code>name</code> 属性，由于此值对于页面组件缓存有着重要作用，<span class="c-red">不正确的值会导致页签切换时缓存失效页面刷新，之前表单输入内容会丢失！（必填）</span></li><li>icon: 菜单组或菜单项图标，显示在显示在主项目菜单栏的图标。</li></ul></li></ol></div>',5),H=e("code",null,"vue-admin-template",-1),J=e("code",null,"router",-1),K=t(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> 
   <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ProjectEntrust&quot;</span><span class="token punctuation">,</span>
   <span class="token property">&quot;icon&quot;</span><span class="token operator">:</span> <span class="token string">&quot;list&quot;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="租户绑定子系统菜单" tabindex="-1"><a class="header-anchor" href="#租户绑定子系统菜单" aria-hidden="true">#</a> 租户绑定子系统菜单</h3><p>使用管理员账号 <code>admin</code> 登陆 <code>V7平台</code> 管理端，打开 <code>权限-&gt;租户管理-&gt;功能</code> 绑定子系统菜单，如图：</p><p><img src="`+u+'" alt="编辑租户功能"></p><p>在 <code>租户功能详情</code> 中点击编辑按钮，进入 <code>租户功能管理</code> 页面，选中新添加的菜单组、菜单项，保存租户功能，如图：</p><p><img src="'+m+'" alt="保存租户功能"></p><p>保存后租户就绑定了新添加的功能，下一步将使用租户管理员进行角色功能绑定。</p><h3 id="创建角色" tabindex="-1"><a class="header-anchor" href="#创建角色" aria-hidden="true">#</a> 创建角色</h3><p>使用租户管理员账号 <code>zhadmin</code> 登陆 <code>V7平台</code> 管理端，打开 <code>权限-&gt;角色管理-&gt;添加角色</code> 创建角色，如图：</p><p><img src="'+g+'" alt="创建角色"></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><ol><li>名称：角色名称</li><li>其他配置按照图中默认配置。</li></ol></div><h3 id="角色绑定子系统菜单" tabindex="-1"><a class="header-anchor" href="#角色绑定子系统菜单" aria-hidden="true">#</a> 角色绑定子系统菜单</h3><p>使用租户管理员账号 <code>zhadmin</code> 登陆 <code>V7平台</code> 管理端，打开 <code>权限-&gt;角色管理-&gt;权限分配</code> 绑定子系统菜单，如图：</p><p><img src="'+h+'" alt="权限分配"></p><p>在 <code>角色功能详情</code> 中点击编辑按钮，进入 <code>角色功能管理</code> 页面，选中新添加的菜单组、菜单项，保存角色功能，如图：</p><p><img src="'+_+'" alt="权限分配保存"></p><p>保存后角色就绑定了新添加的功能，下一步将使用租户管理员创建组织、账号。</p><h3 id="创建组织、账号" tabindex="-1"><a class="header-anchor" href="#创建组织、账号" aria-hidden="true">#</a> 创建组织、账号</h3><p>使用租户管理员账号 <code>zhadmin</code> 登陆 <code>V7平台</code> 管理端，打开 <code>权限-&gt;组织管理-&gt;添加</code> 创建组织、账号，如图：</p><p><img src="'+v+'" alt="添加组织"></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><ol><li>名称：组织名称</li><li>其他配置按照图中默认配置。</li></ol></div><p>打开 <code>权限-&gt;用户权限-&gt;添加人员</code> 创建账号，需要先选择之前创建组织，如图：</p><p><img src="'+E+'" alt="添加人员"></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>用户类型：选择 <code>普通</code> 。</p></div><h3 id="账号绑定角色" tabindex="-1"><a class="header-anchor" href="#账号绑定角色" aria-hidden="true">#</a> 账号绑定角色</h3><p>使用租户管理员账号 <code>zhadmin</code> 登陆 <code>V7平台</code> 管理端，打开 <code>权限-&gt;角色管理-&gt;成员管理</code> 账号绑定角色，如图：</p><p><img src="'+B+'" alt="账号绑定角色"></p><p>在 <code>角色分配用户</code> 中点击添加用户按钮，选中新添加组织，再选择用户保存，如图：</p><p><img src="'+k+'" alt="权限分配保存"></p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>使用权限：需要选择 <code>权管</code> 或者 <code>权管+使用</code> ， 仅选择 <code>使用</code> 登录后会看不到子系统。</p></div><h2 id="创建子系统路由视图" tabindex="-1"><a class="header-anchor" href="#创建子系统路由视图" aria-hidden="true">#</a> 创建子系统路由视图</h2><p>在 <a href="#%E5%88%9B%E5%BB%BA%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E9%85%8D%E7%BD%AE">子系统后台配置</a> 中配置了 <strong>子系统</strong>、<strong>菜单</strong>、<strong>角色</strong>、<strong>组织</strong>、<strong>账号</strong>、<strong>权限绑定</strong>，使用创建的账号 <code>by01</code> 登录后已经可以看到子系统、菜单，如图：</p><h3 id="测试子系统加载" tabindex="-1"><a class="header-anchor" href="#测试子系统加载" aria-hidden="true">#</a> 测试子系统加载</h3><p>首先测试一下子系统是否已正常加载，在浏览器地址栏输入地址： <code>http://localhost:${主项目启动端口}/${子项目代号}</code>，如图：</p><p><img src="'+b+'" alt="测试子系统"></p><p>说明子系统已加载成功。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>子系统代号: 参考 <a href="#%E5%88%9B%E5%BB%BA%E5%AD%90%E7%B3%BB%E7%BB%9F">创建子系统</a> 中 <code>代号</code> 设置。</p></div><h3 id="测试子系统菜单加载" tabindex="-1"><a class="header-anchor" href="#测试子系统菜单加载" aria-hidden="true">#</a> 测试子系统菜单加载</h3><p>点击菜单项 <code>委托受理信息</code> ， 发现子系统页面空白，如图：</p><p><img src="'+f+'" alt="子系统空白"></p><p>说明子系统菜单项对应的路由 <code>/entrustDisposeInfo</code> 在子系统代码中没有对应路由匹配，这是因为上一章节创建的子系统脚手架只有一个默认的 保留路由 <code>/</code> , 用来 <a href="#%E6%B5%8B%E8%AF%95%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%8A%A0%E8%BD%BD">测试子系统加载</a>，其他菜单项配置的路由需要自行添加，如图：</p><p><img src="'+A+`" alt="子系统保留路由"></p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>子系统的 <code>/</code> 路由为保留路由，不要修改它。</p></div><h3 id="创建子系统路由和视图" tabindex="-1"><a class="header-anchor" href="#创建子系统路由和视图" aria-hidden="true">#</a> 创建子系统路由和视图</h3><p>接下来在子项目中创建路由 <code>/entrustDisposeInfo</code> 以及路由对应的视图</p><p>路由：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> constantRoutes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Portal&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;@/views/portal&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/entrustDisposeInfo&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;EntrustDisposeInfo&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;@/views/projectEntrust/entrustDisposeInfo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>视图：</p><p><img src="`+y+'" alt="子系统视图"></p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><ol><li>子系统的路由仅需要 <code>path</code>、<code>name</code>、<code>component</code> 三个属性，其他如 <code>vue-admin-template</code> 中的 <code>meta</code> 等属性不再需要在路由中配置， 因为微应用主项目直接从后台配置中生成菜单、路由，不再需要子系统提供这些属性，路由的 <code>meta</code> 属性全部迁移到 <a href="#%E5%88%9B%E5%BB%BA%E5%AD%90%E7%B3%BB%E7%BB%9F%E8%8F%9C%E5%8D%95">创建子系统菜单</a> 的 <code>扩展配置</code> 中配置。</li><li>子系统的路由不在需要使用 <code>children</code> 子路由，全部都配置为一级路由，原因同上，上下级关系直接由后台配置的菜单生成。</li><li>路由的 <code>name</code> 属性，组件的 <code>name</code> 属性， 以及 <a href="#%E5%88%9B%E5%BB%BA%E5%AD%90%E7%B3%BB%E7%BB%9F%E8%8F%9C%E5%8D%95">后台菜单项</a> <code>扩展配置</code> 的 <code>name</code> 属性这三者必须要保持一致，否则会出现切换页签缓存丢失的问题！</li></ol></div><p>修改完成后，在主项目中重新打开 <code>白蚁防治-&gt;委托受理信息</code> 就能看到新添加的页面功能，如图：</p><p><img src="'+j+'" alt="子系统视图加载成功"></p><p>切换到欢迎页面，再切换回当前页面发现表单输入还在，说明页面缓存已生效，如果不生效请检查 <code>name</code> 属性是否一致。</p><h2 id="系统截图" tabindex="-1"><a class="header-anchor" href="#系统截图" aria-hidden="true">#</a> 系统截图</h2><ol><li>主项目系统登录</li></ol><p><img src="'+D+'" alt="系统登录"></p><ol start="2"><li>登录后加载白蚁防治系统（<span class="c-red">成功</span>）</li></ol><p><img src="'+x+'" alt="白蚁防治加载成功"></p><ol start="3"><li>登录后加载安全鉴定系统（<span class="c-red">失败</span>）</li></ol><p><img src="'+q+'" alt="安全鉴定加载失败"></p><ol start="4"><li>独立运行白蚁防治系统</li></ol><p><img src="'+F+'" alt="独立运行白蚁防治"></p>',62);function O(Q,X){const a=i("RouterLink");return p(),d("div",null,[V,e("div",w,[N,e("ol",null,[P,e("li",null,[s("代号：子系统代码，为了减少部署的麻烦，此值需要和上一节 "),n(a,{to:"/guide/getting-started.md/#%E7%94%9F%E6%88%90%E5%AD%90%E9%A1%B9%E7%9B%AE"},{default:o(()=>[s("生成子项目")]),_:1}),s(" 时输入的 "),z,s(" 保持一致，此值同时定义了子系统的 "),n(a,{to:"/guide/intro.md/#%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%8A%A0%E8%BD%BD"},{default:o(()=>[s("激活规则")]),_:1}),s("，规则为: "),R,s("，此例中当路由地址为："),T,s(" 时会加载此子系统"),C,s("。")]),e("li",null,[s("扩展配置：扩展配置定义了子系统的额外配置，主要配置作用如下： "),e("ul",null,[e("li",null,[s("devPort：子系统在开发模式（本地运行）时的启动端口，此值需要和上一节 "),n(a,{to:"/guide/getting-started.md/#%E7%94%9F%E6%88%90%E5%AD%90%E9%A1%B9%E7%9B%AE"},{default:o(()=>[s("生成子项目")]),_:1}),s(" 时输入的 "),G,s(" 保持一致，"),W,s("。")]),e("li",null,[s("prodUrl：子系统在产品模式（发布）时的应用地址，这里暂时可以先配置为 "),$,s("，等部署到生产环境后再修改，更多细节请参考 "),n(a,{to:"/guide/deploy.md/#%E5%AD%90%E8%B7%AF%E5%BE%84%E9%83%A8%E7%BD%B2"},{default:o(()=>[s("子路径部署")]),_:1}),s(),L,s(" , "),U,s("。")]),M])])])]),e("p",null,[s("扩展配置示例，更多配置请参考 "),n(a,{to:"/configuration/subsystem.html#%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%B1%95%E9%85%8D%E7%BD%AE"},{default:o(()=>[s("子系统扩展配置")]),_:1}),s(" ：")]),S,e("p",null,[s("扩展配置示例，扩展配置还支持 "),H,s(" 中 "),J,s(" 定义的所有配置，更多配置请参考 "),n(a,{to:"/configuration/subsystem.html#%E5%AD%90%E7%B3%BB%E7%BB%9F%E8%8F%9C%E5%8D%95%E6%89%A9%E5%B1%95%E9%85%8D%E7%BD%AE"},{default:o(()=>[s("子系统扩展菜单配置")]),_:1}),s(" ：")]),K])}const Z=c(I,[["render",O],["__file","subsystem-config.html.vue"]]);export{Z as default};
